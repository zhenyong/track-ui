Ext.data.JsonP.Tk_Class({"tagname":"class","name":"Tk.Class","autodetected":{},"files":[{"filename":"Class.js","href":"Class.html#Tk-Class"}],"members":[{"name":"alias","tagname":"cfg","owner":"Tk.Class","id":"cfg-alias","meta":{}},{"name":"alternateClassName","tagname":"cfg","owner":"Tk.Class","id":"cfg-alternateClassName","meta":{}},{"name":"extend","tagname":"cfg","owner":"Tk.Class","id":"cfg-extend","meta":{}},{"name":"inheritableStatics","tagname":"cfg","owner":"Tk.Class","id":"cfg-inheritableStatics","meta":{}},{"name":"mixins","tagname":"cfg","owner":"Tk.Class","id":"cfg-mixins","meta":{}},{"name":"override","tagname":"cfg","owner":"Tk.Class","id":"cfg-override","meta":{}},{"name":"requires","tagname":"cfg","owner":"Tk.Class","id":"cfg-requires","meta":{}},{"name":"singleton","tagname":"cfg","owner":"Tk.Class","id":"cfg-singleton","meta":{}},{"name":"statics","tagname":"cfg","owner":"Tk.Class","id":"cfg-statics","meta":{}},{"name":"uses","tagname":"cfg","owner":"Tk.Class","id":"cfg-uses","meta":{}},{"name":"xtype","tagname":"cfg","owner":"Tk.Class","id":"cfg-xtype","meta":{}},{"name":"defaultPreprocessors","tagname":"property","owner":"Tk.Class","id":"property-defaultPreprocessors","meta":{"private":true}},{"name":"preprocessors","tagname":"property","owner":"Tk.Class","id":"property-preprocessors","meta":{"private":true}},{"name":"constructor","tagname":"method","owner":"Tk.Class","id":"method-constructor","meta":{}},{"name":"create","tagname":"method","owner":"Tk.Class","id":"method-create","meta":{"private":true}},{"name":"getPreprocessors","tagname":"method","owner":"Tk.Class","id":"method-getPreprocessors","meta":{"private":true}},{"name":"onBeforeCreated","tagname":"method","owner":"Tk.Class","id":"method-onBeforeCreated","meta":{"private":true}},{"name":"process","tagname":"method","owner":"Tk.Class","id":"method-process","meta":{"private":true}},{"name":"getDefaultPreprocessors","tagname":"method","owner":"Tk.Class","id":"static-method-getDefaultPreprocessors","meta":{"private":true,"static":true}},{"name":"getPreprocessor","tagname":"method","owner":"Tk.Class","id":"static-method-getPreprocessor","meta":{"private":true,"static":true}},{"name":"registerPreprocessor","tagname":"method","owner":"Tk.Class","id":"static-method-registerPreprocessor","meta":{"chainable":true,"private":true,"static":true}},{"name":"setDefaultPreprocessorPosition","tagname":"method","owner":"Tk.Class","id":"static-method-setDefaultPreprocessorPosition","meta":{"chainable":true,"private":true,"static":true}},{"name":"setDefaultPreprocessors","tagname":"method","owner":"Tk.Class","id":"static-method-setDefaultPreprocessors","meta":{"chainable":true,"private":true,"static":true}}],"alternateClassNames":[],"aliases":{},"id":"class-Tk.Class","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Class.html#Tk-Class' target='_blank'>Class.js</a></div></pre><div class='doc-contents'><p>底层类工厂，不要直接使用。创建类可以通过 <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a> 。</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-cfg'>Config options</h3><div class='subsection'><div id='cfg-alias' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Class'>Tk.Class</span><br/><a href='source/ClassManager.html#Tk-Class-cfg-alias' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Class-cfg-alias' class='name expandable'>alias</a> : String/String[]<span class=\"signature\"></span></div><div class='description'><div class='short'>List of short aliases for class names. ...</div><div class='long'><p>List of short aliases for class names. An alias consists of a namespace and a name\nconcatenated by a period as &#60;namespace&#62;.&#60;name&#62;</p>\n\n<ul>\n<li><strong>namespace</strong> - The namespace describes what kind of alias this is and must be\nall lowercase.</li>\n<li><strong>name</strong> - The name of the alias which allows the lazy-instantiation via the\nalias. The name shouldn't contain any periods.</li>\n</ul>\n\n\n<p>A list of namespaces and the usages are:</p>\n\n<ul>\n<li><strong>feature</strong> - Grid features</li>\n<li><strong>plugin</strong> - Plugins</li>\n<li><strong>store</strong> - Tk.data.Store</li>\n<li><strong>widget</strong> - Components</li>\n</ul>\n\n\n<p>Most useful for defining xtypes for widgets:</p>\n\n<pre><code><a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('MyApp.CoolPanel', {\n    extend: 'Tk.panel.Panel',\n    alias: ['widget.coolpanel'],\n    title: 'Yeah!'\n});\n\n// Using <a href=\"#!/api/Tk-method-create\" rel=\"Tk-method-create\" class=\"docClass\">Tk.create</a>\n<a href=\"#!/api/Tk-method-create\" rel=\"Tk-method-create\" class=\"docClass\">Tk.create</a>('widget.coolpanel');\n\n// Using the shorthand for defining widgets by xtype\n<a href=\"#!/api/Tk-method-widget\" rel=\"Tk-method-widget\" class=\"docClass\">Tk.widget</a>('panel', {\n    items: [\n        {xtype: 'coolpanel', html: 'Foo'},\n        {xtype: 'coolpanel', html: 'Bar'}\n    ]\n});\n</code></pre>\n</div></div></div><div id='cfg-alternateClassName' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Class'>Tk.Class</span><br/><a href='source/ClassManager.html#Tk-Class-cfg-alternateClassName' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Class-cfg-alternateClassName' class='name expandable'>alternateClassName</a> : String/String[]<span class=\"signature\"></span></div><div class='description'><div class='short'>Defines alternate names for this class. ...</div><div class='long'><p>Defines alternate names for this class.  For example:</p>\n\n<pre><code><a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('Developer', {\n    alternateClassName: ['Coder', 'Hacker'],\n    code: function(msg) {\n        alert('Typing... ' + msg);\n    }\n});\n\nvar joe = <a href=\"#!/api/Tk-method-create\" rel=\"Tk-method-create\" class=\"docClass\">Tk.create</a>('Developer');\njoe.code('stackoverflow');\n\nvar rms = <a href=\"#!/api/Tk-method-create\" rel=\"Tk-method-create\" class=\"docClass\">Tk.create</a>('Hacker');\nrms.code('hack hack');\n</code></pre>\n</div></div></div><div id='cfg-extend' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Class'>Tk.Class</span><br/><a href='source/Class.html#Tk-Class-cfg-extend' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Class-cfg-extend' class='name expandable'>extend</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The parent class that this class extends. ...</div><div class='long'><p>The parent class that this class extends. For example:</p>\n\n<pre><code><a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('Person', {\n    say: function(text) { alert(text); }\n});\n\n<a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('Developer', {\n    extend: 'Person',\n    say: function(text) { this.callParent([\"print \"+text]); }\n});\n</code></pre>\n</div></div></div><div id='cfg-inheritableStatics' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Class'>Tk.Class</span><br/><a href='source/Class.html#Tk-Class-cfg-inheritableStatics' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Class-cfg-inheritableStatics' class='name expandable'>inheritableStatics</a> : Object<span class=\"signature\"></span></div><div class='description'><div class='short'><p>会被子类继承的静态方法</p>\n</div><div class='long'><p>会被子类继承的静态方法</p>\n</div></div></div><div id='cfg-mixins' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Class'>Tk.Class</span><br/><a href='source/Class.html#Tk-Class-cfg-mixins' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Class-cfg-mixins' class='name expandable'>mixins</a> : String[]/Object<span class=\"signature\"></span></div><div class='description'><div class='short'>一组用于混合的类. ...</div><div class='long'><p>一组用于混合的类. 例如:</p>\n\n<pre><code><a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('CanSing', {\n     sing: function() {\n         alert(\"For he's a jolly good fellow...\")\n     }\n});\n\n<a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('Musician', {\n     mixins: ['CanSing']\n})\n</code></pre>\n\n<p>此时，Musician 通过混合 CanSing 获得 <code>sing</code> 方法</p>\n\n<p>如果 Musician 已经有 <code>sing</code> 方法? 或者你要混入两个类的\n <code>sing</code> 方法? 那么最好把 mixins 定义成对象:</p>\n\n<pre><code><a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('Musician', {\n     mixins: {\n         canSing: 'CanSing'\n     },\n\n     sing: function() {\n         // delegate singing operation to mixin\n         this.mixins.canSing.sing.call(this);\n     }\n})\n</code></pre>\n\n<p>原来有一个自动混入的 <code>sing</code> 方法，此时 Musician 的<code>sing</code> 方法 覆盖了混入的\n<code>sing</code> 方法，不过你还是可以通过 <code>mixins</code> 属性去访问.</p>\n</div></div></div><div id='cfg-override' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Class'>Tk.Class</span><br/><a href='source/ClassManager.html#Tk-Class-cfg-override' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Class-cfg-override' class='name expandable'>override</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Overrides members of the specified target class. ...</div><div class='long'><p>Overrides members of the specified <code>target</code> class.</p>\n\n<p><strong>NOTE:</strong> the overridden class must have been defined using\n<a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a> in order to use the <code>override</code> config.</p>\n\n<p>Methods defined on the overriding class will not automatically call the methods of\nthe same name in the ancestor class chain.  To call the parent's method of the\nsame name you must call <a href=\"#!/api/Tk.Base-method-callParent\" rel=\"Tk.Base-method-callParent\" class=\"docClass\">callParent</a>.  To skip the\nmethod of the overridden class and call its parent you will instead call\n<a href=\"#!/api/Tk.Base-method-callSuper\" rel=\"Tk.Base-method-callSuper\" class=\"docClass\">callSuper</a>.</p>\n\n<p>See <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a> for additional usage examples.</p>\n</div></div></div><div id='cfg-requires' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Class'>Tk.Class</span><br/><a href='source/Loader.html#Tk-Class-cfg-requires' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Class-cfg-requires' class='name expandable'>requires</a> : String[]<span class=\"signature\"></span></div><div class='description'><div class='short'>List of classes that have to be loaded before instantiating this class. ...</div><div class='long'><p>List of classes that have to be loaded before instantiating this class.\nFor example:</p>\n\n<pre><code><a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('Mother', {\n    requires: ['Child'],\n    giveBirth: function() {\n        // we can be sure that child class is available.\n        return new Child();\n    }\n});\n</code></pre>\n</div></div></div><div id='cfg-singleton' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Class'>Tk.Class</span><br/><a href='source/ClassManager.html#Tk-Class-cfg-singleton' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Class-cfg-singleton' class='name expandable'>singleton</a> : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>When set to true, the class will be instantiated as singleton. ...</div><div class='long'><p>When set to true, the class will be instantiated as singleton.  For example:</p>\n\n<pre><code><a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('Logger', {\n    singleton: true,\n    log: function(msg) {\n        console.log(msg);\n    }\n});\n\nLogger.log('Hello');\n</code></pre>\n</div></div></div><div id='cfg-statics' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Class'>Tk.Class</span><br/><a href='source/Class.html#Tk-Class-cfg-statics' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Class-cfg-statics' class='name expandable'>statics</a> : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>静态方法. ...</div><div class='long'><p>静态方法. For example:</p>\n\n<pre><code><a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('Computer', {\n     statics: {\n         factory: function(brand) {\n             // 'this' in static methods refer to the class itself\n             return new this(brand);\n         }\n     },\n\n     constructor: function() { ... }\n});\n\nvar dellComputer = Computer.factory('Dell');\n</code></pre>\n</div></div></div><div id='cfg-uses' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Class'>Tk.Class</span><br/><a href='source/Loader.html#Tk-Class-cfg-uses' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Class-cfg-uses' class='name expandable'>uses</a> : String[]<span class=\"signature\"></span></div><div class='description'><div class='short'>List of optional classes to load together with this class. ...</div><div class='long'><p>List of optional classes to load together with this class. These aren't neccessarily loaded before\nthis class is created, but are guaranteed to be available before Tk.onReady listeners are\ninvoked. For example:</p>\n\n<pre><code><a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('Mother', {\n    uses: ['Child'],\n    giveBirth: function() {\n        // This code might, or might not work:\n        // return new Child();\n\n        // Instead use <a href=\"#!/api/Tk-method-create\" rel=\"Tk-method-create\" class=\"docClass\">Tk.create</a>() to load the class at the spot if not loaded already:\n        return <a href=\"#!/api/Tk-method-create\" rel=\"Tk-method-create\" class=\"docClass\">Tk.create</a>('Child');\n    }\n});\n</code></pre>\n</div></div></div><div id='cfg-xtype' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Class'>Tk.Class</span><br/><a href='source/ClassManager.html#Tk-Class-cfg-xtype' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Class-cfg-xtype' class='name expandable'>xtype</a> : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>\n</div><div class='long'>\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-defaultPreprocessors' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Class'>Tk.Class</span><br/><a href='source/Class.html#Tk-Class-property-defaultPreprocessors' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Class-property-defaultPreprocessors' class='name expandable'>defaultPreprocessors</a> : Array<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>[]</code></p></div></div></div><div id='property-preprocessors' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Class'>Tk.Class</span><br/><a href='source/Class.html#Tk-Class-property-preprocessors' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Class-property-preprocessors' class='name expandable'>preprocessors</a> : Object<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>{}</code></p></div></div></div></div></div><div class='members-section'><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Instance methods</h3><div id='method-constructor' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Class'>Tk.Class</span><br/><a href='source/Class.html#Tk-Class-method-constructor' target='_blank' class='view-source'>view source</a></div><strong class='new-keyword'>new</strong><a href='#!/api/Tk.Class-method-constructor' class='name expandable'>Tk.Class</a>( <span class='pre'>data, [onCreated]</span> ) : <a href=\"#!/api/Tk.Base\" rel=\"Tk.Base\" class=\"docClass\">Tk.Base</a><span class=\"signature\"></span></div><div class='description'><div class='short'>创建一个匿名类 ...</div><div class='long'><p>创建一个匿名类</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>data</span> : Object<div class='sub-desc'><p>表示这个类的一组成员对象</p>\n</div></li><li><span class='pre'>onCreated</span> : Function (optional)<div class='sub-desc'><p>类创建完执行回掉</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Tk.Base\" rel=\"Tk.Base\" class=\"docClass\">Tk.Base</a></span><div class='sub-desc'><p>新创建的类</p>\n</div></li></ul></div></div></div><div id='method-create' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Class'>Tk.Class</span><br/><a href='source/Class.html#Tk-Class-method-create' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Class-method-create' class='name expandable'>create</a>( <span class='pre'>Class, data</span> )<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>Class</span> : Object<div class='sub-desc'></div></li><li><span class='pre'>data</span> : Object<div class='sub-desc'></div></li></ul></div></div></div><div id='method-getPreprocessors' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Class'>Tk.Class</span><br/><a href='source/Class.html#Tk-Class-method-getPreprocessors' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Class-method-getPreprocessors' class='name expandable'>getPreprocessors</a>( <span class='pre'></span> )<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-onBeforeCreated' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Class'>Tk.Class</span><br/><a href='source/Class.html#Tk-Class-method-onBeforeCreated' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Class-method-onBeforeCreated' class='name expandable'>onBeforeCreated</a>( <span class='pre'>Class, data, hooks</span> )<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>Class</span> : Object<div class='sub-desc'></div></li><li><span class='pre'>data</span> : Object<div class='sub-desc'></div></li><li><span class='pre'>hooks</span> : Object<div class='sub-desc'></div></li></ul></div></div></div><div id='method-process' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Class'>Tk.Class</span><br/><a href='source/Class.html#Tk-Class-method-process' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Class-method-process' class='name expandable'>process</a>( <span class='pre'>Class, data, onCreated</span> )<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>Class</span> : Object<div class='sub-desc'></div></li><li><span class='pre'>data</span> : Object<div class='sub-desc'></div></li><li><span class='pre'>onCreated</span> : Object<div class='sub-desc'></div></li></ul></div></div></div></div><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Static methods</h3><div id='static-method-getDefaultPreprocessors' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Class'>Tk.Class</span><br/><a href='source/Class.html#Tk-Class-static-method-getDefaultPreprocessors' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Class-static-method-getDefaultPreprocessors' class='name expandable'>getDefaultPreprocessors</a>( <span class='pre'></span> ) : Function[]<span class=\"signature\"><span class='private' >private</span><span class='static' >static</span></span></div><div class='description'><div class='short'>获取默认预处理器 ...</div><div class='long'><p>获取默认预处理器</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Function[]</span><div class='sub-desc'><p>defaultPreprocessors</p>\n</div></li></ul></div></div></div><div id='static-method-getPreprocessor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Class'>Tk.Class</span><br/><a href='source/Class.html#Tk-Class-static-method-getPreprocessor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Class-static-method-getPreprocessor' class='name expandable'>getPreprocessor</a>( <span class='pre'>name</span> ) : Function<span class=\"signature\"><span class='private' >private</span><span class='static' >static</span></span></div><div class='description'><div class='short'>获取处理器的处理方法 ...</div><div class='long'><p>获取处理器的处理方法</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Function</span><div class='sub-desc'><p>preprocessor</p>\n</div></li></ul></div></div></div><div id='static-method-registerPreprocessor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Class'>Tk.Class</span><br/><a href='source/Class.html#Tk-Class-static-method-registerPreprocessor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Class-static-method-registerPreprocessor' class='name expandable'>registerPreprocessor</a>( <span class='pre'>name, fn</span> ) : <a href=\"#!/api/Tk.Class\" rel=\"Tk.Class\" class=\"docClass\">Tk.Class</a><span class=\"signature\"><span class='chainable' >chainable</span><span class='private' >private</span><span class='static' >static</span></span></div><div class='description'><div class='short'>注册一个 “预处理器” ...</div><div class='long'><p>注册一个 “预处理器”</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>处理器名称</p>\n</div></li><li><span class='pre'>fn</span> : Function<div class='sub-desc'><p>处理器执行的方法. 格式:</p>\n\n<pre><code>function(cls, data, innerFn) {\n    // 你的代码\n\n    // 当处理器处理完后一定要执行这个方法\n    if (innerFn) {\n        innerFn.call(this, cls, data);\n    }\n});\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>cls</span> : Function<div class='sub-desc'><p>创建的类</p>\n</div></li><li><span class='pre'>data</span> : Object<div class='sub-desc'><p>传进 <a href=\"#!/api/Tk.Class\" rel=\"Tk.Class\" class=\"docClass\">Tk.Class</a> 构造函数的键值对</p>\n</div></li><li><span class='pre'>innerFn</span> : Function<div class='sub-desc'><p>当这个预处理器处理完后 <strong>一定</strong> 要执行的回调，无论处理器是同步还是异步</p>\n</div></li></ul></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Tk.Class\" rel=\"Tk.Class\" class=\"docClass\">Tk.Class</a></span><div class='sub-desc'><p>this</p>\n</div></li></ul></div></div></div><div id='static-method-setDefaultPreprocessorPosition' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Class'>Tk.Class</span><br/><a href='source/Class.html#Tk-Class-static-method-setDefaultPreprocessorPosition' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Class-static-method-setDefaultPreprocessorPosition' class='name expandable'>setDefaultPreprocessorPosition</a>( <span class='pre'>name, offset, relativeName</span> ) : <a href=\"#!/api/Tk.Class\" rel=\"Tk.Class\" class=\"docClass\">Tk.Class</a><span class=\"signature\"><span class='chainable' >chainable</span><span class='private' >private</span><span class='static' >static</span></span></div><div class='description'><div class='short'>Insert this pre-processor at a specific position in the stack, optionally relative to\nany existing pre-processor. ...</div><div class='long'><p>Insert this pre-processor at a specific position in the stack, optionally relative to\nany existing pre-processor. For example:</p>\n\n<pre><code><a href=\"#!/api/Tk.Class-static-method-registerPreprocessor\" rel=\"Tk.Class-static-method-registerPreprocessor\" class=\"docClass\">Tk.Class.registerPreprocessor</a>('debug', function(cls, data, fn) {\n    // Your code here\n\n    if (fn) {\n        fn.call(this, cls, data);\n    }\n}).setDefaultPreprocessorPosition('debug', 'last');\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>The pre-processor name. Note that it needs to be registered with\n<a href=\"#!/api/Tk.Class-static-method-registerPreprocessor\" rel=\"Tk.Class-static-method-registerPreprocessor\" class=\"docClass\">registerPreprocessor</a> before this</p>\n</div></li><li><span class='pre'>offset</span> : String<div class='sub-desc'><p>The insertion position. Four possible values are:\n'first', 'last', or: 'before', 'after' (relative to the name provided in the third argument)</p>\n</div></li><li><span class='pre'>relativeName</span> : String<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Tk.Class\" rel=\"Tk.Class\" class=\"docClass\">Tk.Class</a></span><div class='sub-desc'><p>this</p>\n</div></li></ul></div></div></div><div id='static-method-setDefaultPreprocessors' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Class'>Tk.Class</span><br/><a href='source/Class.html#Tk-Class-static-method-setDefaultPreprocessors' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Class-static-method-setDefaultPreprocessors' class='name expandable'>setDefaultPreprocessors</a>( <span class='pre'>preprocessors</span> ) : <a href=\"#!/api/Tk.Class\" rel=\"Tk.Class\" class=\"docClass\">Tk.Class</a><span class=\"signature\"><span class='chainable' >chainable</span><span class='private' >private</span><span class='static' >static</span></span></div><div class='description'><div class='short'>Set the default array stack of default pre-processors ...</div><div class='long'><p>Set the default array stack of default pre-processors</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>preprocessors</span> : Array<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Tk.Class\" rel=\"Tk.Class\" class=\"docClass\">Tk.Class</a></span><div class='sub-desc'><p>this</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});