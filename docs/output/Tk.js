Ext.data.JsonP.Tk({"tagname":"class","name":"Tk","autodetected":{},"files":[{"filename":"Tk.js","href":"Tk.html#Tk"}],"singleton":true,"members":[{"name":"baseCSSPrefix","tagname":"property","owner":"Tk","id":"property-baseCSSPrefix","meta":{}},{"name":"enableGarbageCollector","tagname":"property","owner":"Tk","id":"property-enableGarbageCollector","meta":{}},{"name":"enumerables","tagname":"property","owner":"Tk","id":"property-enumerables","meta":{}},{"name":"idPrefix","tagname":"property","owner":"Tk","id":"property-idPrefix","meta":{"private":true}},{"name":"idSeed","tagname":"property","owner":"Tk","id":"property-idSeed","meta":{"private":true}},{"name":"privateFn","tagname":"property","owner":"Tk","id":"property-privateFn","meta":{}},{"name":"addRootNamespaces","tagname":"method","owner":"Tk","id":"method-addRootNamespaces","meta":{"private":true}},{"name":"apply","tagname":"method","owner":"Tk","id":"method-apply","meta":{}},{"name":"applyIf","tagname":"method","owner":"Tk","id":"method-applyIf","meta":{}},{"name":"create","tagname":"method","owner":"Tk","id":"method-create","meta":{}},{"name":"createByAlias","tagname":"method","owner":"Tk","id":"method-createByAlias","meta":{}},{"name":"createWidget","tagname":"method","owner":"Tk","id":"method-createWidget","meta":{"deprecated":{"text":"<p>Use <a href=\"#!/api/Tk-method-widget\" rel=\"Tk-method-widget\" class=\"docClass\">widget</a> instead.</p>\n"},"private":true}},{"name":"define","tagname":"method","owner":"Tk","id":"method-define","meta":{}},{"name":"exclude","tagname":"method","owner":"Tk","id":"method-exclude","meta":{}},{"name":"getClass","tagname":"method","owner":"Tk","id":"method-getClass","meta":{}},{"name":"getClassName","tagname":"method","owner":"Tk","id":"method-getClassName","meta":{}},{"name":"id","tagname":"method","owner":"Tk","id":"method-id","meta":{}},{"name":"isArray","tagname":"method","owner":"Tk","id":"method-isArray","meta":{}},{"name":"isBoolean","tagname":"method","owner":"Tk","id":"method-isBoolean","meta":{}},{"name":"isDate","tagname":"method","owner":"Tk","id":"method-isDate","meta":{}},{"name":"isDefined","tagname":"method","owner":"Tk","id":"method-isDefined","meta":{}},{"name":"isElement","tagname":"method","owner":"Tk","id":"method-isElement","meta":{}},{"name":"isEmpty","tagname":"method","owner":"Tk","id":"method-isEmpty","meta":{}},{"name":"isFunction","tagname":"method","owner":"Tk","id":"method-isFunction","meta":{}},{"name":"isNumber","tagname":"method","owner":"Tk","id":"method-isNumber","meta":{}},{"name":"isNumeric","tagname":"method","owner":"Tk","id":"method-isNumeric","meta":{}},{"name":"isObject","tagname":"method","owner":"Tk","id":"method-isObject","meta":{}},{"name":"isPrimitive","tagname":"method","owner":"Tk","id":"method-isPrimitive","meta":{}},{"name":"isSimpleObject","tagname":"method","owner":"Tk","id":"method-isSimpleObject","meta":{"private":true}},{"name":"isString","tagname":"method","owner":"Tk","id":"method-isString","meta":{}},{"name":"isTextNode","tagname":"method","owner":"Tk","id":"method-isTextNode","meta":{}},{"name":"namespace","tagname":"method","owner":"Tk","id":"method-namespace","meta":{}},{"name":"ns","tagname":"method","owner":"Tk","id":"method-ns","meta":{}},{"name":"override","tagname":"method","owner":"Tk","id":"method-override","meta":{}},{"name":"require","tagname":"method","owner":"Tk","id":"method-require","meta":{}},{"name":"syncRequire","tagname":"method","owner":"Tk","id":"method-syncRequire","meta":{}},{"name":"widget","tagname":"method","owner":"Tk","id":"method-widget","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-Tk","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Tk.html#Tk' target='_blank'>Tk.js</a></div></pre><div class='doc-contents'><p>Tk 全局命名空间，封装了所有的类、单例、工具方法。</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-baseCSSPrefix' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/Tk.html#Tk-property-baseCSSPrefix' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-property-baseCSSPrefix' class='name expandable'>baseCSSPrefix</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>样式前缀会应用到所有组件中 Tk 组件. ...</div><div class='long'><p>样式前缀会应用到所有组件中 <code>Tk</code> 组件. 你可以在渲染之前配置其他值</p>\n\n<pre><code>Tk.buildSettings = {\n    baseCSSPrefix : 'abc-'\n};\n</code></pre>\n\n<p>便于定义皮肤</p>\n<p>Defaults to: <code>&#39;x-&#39;</code></p></div></div></div><div id='property-enableGarbageCollector' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/Tk.html#Tk-property-enableGarbageCollector' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-property-enableGarbageCollector' class='name expandable'>enableGarbageCollector</a> : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>true to automatically uncache orphaned Tk.Elements periodically. ...</div><div class='long'><p><code>true</code> to automatically uncache orphaned Tk.Elements periodically. If set to\n<code>false</code>, the application will be required to clean up orphaned Tk.Elements and\nit's listeners as to not cause memory leakage.</p>\n<p>Defaults to: <code>false</code></p></div></div></div><div id='property-enumerables' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/Tk.html#Tk-property-enumerables' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-property-enumerables' class='name expandable'>enumerables</a> : String[]<span class=\"signature\"></span></div><div class='description'><div class='short'><p>存放老的浏览器无法遍历的属性名</p>\n</div><div class='long'><p>存放老的浏览器无法遍历的属性名</p>\n</div></div></div><div id='property-idPrefix' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/Tk.html#Tk-property-idPrefix' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-property-idPrefix' class='name expandable'>idPrefix</a> : String<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>&#39;tk-&#39;</code></p></div></div></div><div id='property-idSeed' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/Tk.html#Tk-property-idSeed' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-property-idSeed' class='name expandable'>idSeed</a> : Number<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>0</code></p></div></div></div><div id='property-privateFn' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/Tk.html#Tk-property-privateFn' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-property-privateFn' class='name expandable'>privateFn</a> : Function<span class=\"signature\"></span></div><div class='description'><div class='short'>A reusable empty function for use as privates members. ...</div><div class='long'><p>A reusable empty function for use as <code>privates</code> members.</p>\n\n<pre><code> <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('MyClass', {\n     nothing: Tk.emptyFn,\n\n     privates: {\n         privateNothing: <a href=\"#!/api/Tk-property-privateFn\" rel=\"Tk-property-privateFn\" class=\"docClass\">Tk.privateFn</a>\n     }\n });\n</code></pre>\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-addRootNamespaces' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/ClassManager.html#Tk-method-addRootNamespaces' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-addRootNamespaces' class='name expandable'>addRootNamespaces</a>( <span class='pre'>namespaces</span> )<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'>This function registers top-level (root) namespaces. ...</div><div class='long'><p>This function registers top-level (root) namespaces. This is needed for \"sandbox\"\nbuilds.</p>\n\n<pre><code> <a href=\"#!/api/Tk-method-addRootNamespaces\" rel=\"Tk-method-addRootNamespaces\" class=\"docClass\">Tk.addRootNamespaces</a>({\n     MyApp: MyApp,\n     Common: Common\n });\n</code></pre>\n\n<p>In the above example, <code>MyApp</code> and <code>Common</code> are top-level namespaces that happen\nto also be included in the sandbox closure. Something like this:</p>\n\n<pre><code> (function(Tk) {\n\n Tk.sandboxName = 'Ext6';\n Tk.isSandboxed = true;\n Tk.buildSettings = { baseCSSPrefix: \"x6-\", scopeResetCSS: true };\n\n var MyApp = MyApp || {};\n <a href=\"#!/api/Tk-method-addRootNamespaces\" rel=\"Tk-method-addRootNamespaces\" class=\"docClass\">Tk.addRootNamespaces</a>({ MyApp: MyApp );\n\n ... normal app.js goes here ...\n\n })(this.Ext6 || (this.Ext6 = {}));\n</code></pre>\n\n<p>The sandbox wrapper around the normally built <code>app.js</code> content has to take care\nof introducing top-level namespaces as well as call this method.</p>\n        <p>Available since: <b>6.0.0</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>namespaces</span> : Object<div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-apply' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/Tk.html#Tk-method-apply' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-apply' class='name expandable'>apply</a>( <span class='pre'>object, config, [defaults]</span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Copies all the properties of config to the specified object. ...</div><div class='long'><p>Copies all the properties of <code>config</code> to the specified <code>object</code>. There are two levels\nof defaulting supported:</p>\n\n<pre><code> <a href=\"#!/api/Tk-method-apply\" rel=\"Tk-method-apply\" class=\"docClass\">Tk.apply</a>(obj, { a: 1 }, { a: 2 });\n //obj.a === 1\n\n <a href=\"#!/api/Tk-method-apply\" rel=\"Tk-method-apply\" class=\"docClass\">Tk.apply</a>(obj, {  }, { a: 2 });\n //obj.a === 2\n</code></pre>\n\n<p>Note that if recursive merging and cloning without referencing the original objects\nor arrays is needed, use Tk.Object.merge instead.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object</span> : Object<div class='sub-desc'><p>The receiver of the properties.</p>\n</div></li><li><span class='pre'>config</span> : Object<div class='sub-desc'><p>The primary source of the properties.</p>\n</div></li><li><span class='pre'>defaults</span> : Object (optional)<div class='sub-desc'><p>An object that will also be applied for default values.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>returns <code>object</code>.</p>\n</div></li></ul></div></div></div><div id='method-applyIf' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/Tk.html#Tk-method-applyIf' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-applyIf' class='name expandable'>applyIf</a>( <span class='pre'>object, config</span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Copies all the properties of config to object if they don't already exist. ...</div><div class='long'><p>Copies all the properties of config to object if they don't already exist.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object</span> : Object<div class='sub-desc'><p>The receiver of the properties</p>\n</div></li><li><span class='pre'>config</span> : Object<div class='sub-desc'><p>The source of the properties</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>returns obj</p>\n</div></li></ul></div></div></div><div id='method-create' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/ClassManager.html#Tk-method-create' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-create' class='name expandable'>create</a>( <span class='pre'>[name], [args]</span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Instantiate a class by either full name, alias or alternate name. ...</div><div class='long'><p>Instantiate a class by either full name, alias or alternate name.</p>\n\n<p>If <a href=\"#!/api/Tk.Loader\" rel=\"Tk.Loader\" class=\"docClass\">Tk.Loader</a> is <a href=\"#!/api/Tk.Loader-method-setConfig\" rel=\"Tk.Loader-method-setConfig\" class=\"docClass\">enabled</a> and the class has\nnot been defined yet, it will attempt to load the class via synchronous loading.</p>\n\n<p>For example, all these three lines return the same result:</p>\n\n<pre><code> // xtype\n var window = <a href=\"#!/api/Tk-method-create\" rel=\"Tk-method-create\" class=\"docClass\">Tk.create</a>({\n     xtype: 'window',\n     width: 600,\n     height: 800,\n     ...\n });\n\n // alias\n var window = <a href=\"#!/api/Tk-method-create\" rel=\"Tk-method-create\" class=\"docClass\">Tk.create</a>('widget.window', {\n     width: 600,\n     height: 800,\n     ...\n });\n\n // alternate name\n var window = <a href=\"#!/api/Tk-method-create\" rel=\"Tk-method-create\" class=\"docClass\">Tk.create</a>('Tk.Window', {\n     width: 600,\n     height: 800,\n     ...\n });\n\n // full class name\n var window = <a href=\"#!/api/Tk-method-create\" rel=\"Tk-method-create\" class=\"docClass\">Tk.create</a>('Tk.window.Window', {\n     width: 600,\n     height: 800,\n     ...\n });\n\n // single object with xclass property:\n var window = <a href=\"#!/api/Tk-method-create\" rel=\"Tk-method-create\" class=\"docClass\">Tk.create</a>({\n     xclass: 'Tk.window.Window', // any valid value for 'name' (above)\n     width: 600,\n     height: 800,\n     ...\n });\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String (optional)<div class='sub-desc'><p>The class name or alias. Can be specified as <code>xclass</code>\nproperty if only one object parameter is specified.</p>\n</div></li><li><span class='pre'>args</span> : Object... (optional)<div class='sub-desc'><p>Additional arguments after the name will be passed to\nthe class' constructor.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>instance</p>\n</div></li></ul></div></div></div><div id='method-createByAlias' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/ClassManager.html#Tk-method-createByAlias' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-createByAlias' class='name expandable'>createByAlias</a>( <span class='pre'>alias, args</span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Instantiate a class by its alias. ...</div><div class='long'><p>Instantiate a class by its alias. This is usually invoked by the\nshorthand <a href=\"#!/api/Tk-method-createByAlias\" rel=\"Tk-method-createByAlias\" class=\"docClass\">createByAlias</a>.</p>\n\n<p>If <a href=\"#!/api/Tk.Loader\" rel=\"Tk.Loader\" class=\"docClass\">Tk.Loader</a> is <a href=\"#!/api/Tk.Loader-method-setConfig\" rel=\"Tk.Loader-method-setConfig\" class=\"docClass\">enabled</a> and the class\nhas not been defined yet, it will attempt to load the class via synchronous\nloading.</p>\n\n<pre><code>var window = <a href=\"#!/api/Tk-method-createByAlias\" rel=\"Tk-method-createByAlias\" class=\"docClass\">Tk.createByAlias</a>('widget.window', { width: 600, height: 800 });\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>alias</span> : String<div class='sub-desc'>\n</div></li><li><span class='pre'>args</span> : Object...<div class='sub-desc'><p>Additional arguments after the alias will be passed to the\nclass constructor.</p>\n\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>instance</p>\n\n</div></li></ul></div></div></div><div id='method-createWidget' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/ClassManager.html#Tk-method-createWidget' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-createWidget' class='name expandable'>createWidget</a>( <span class='pre'></span> )<span class=\"signature\"><span class='deprecated' >deprecated</span><span class='private' >private</span></span></div><div class='description'><div class='short'>Old name for widget. ...</div><div class='long'><p>Old name for <a href=\"#!/api/Tk-method-widget\" rel=\"Tk-method-widget\" class=\"docClass\">widget</a>.</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprected</strong> </p>\n        <p>Use <a href=\"#!/api/Tk-method-widget\" rel=\"Tk-method-widget\" class=\"docClass\">widget</a> instead.</p>\n\n        </div>\n</div></div></div><div id='method-define' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/ClassManager.html#Tk-method-define' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-define' class='name expandable'>define</a>( <span class='pre'>className, data, [createdFn]</span> ) : <a href=\"#!/api/Tk.Base\" rel=\"Tk.Base\" class=\"docClass\">Tk.Base</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Defines a class or override. ...</div><div class='long'><p>Defines a class or override. A basic class is defined like this:</p>\n\n<pre><code> <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('My.awesome.Class', {\n     someProperty: 'something',\n\n     someMethod: function(s) {\n         alert(s + this.someProperty);\n     }\n\n     ...\n });\n\n var obj = new My.awesome.Class();\n\n obj.someMethod('Say '); // alerts 'Say something'\n</code></pre>\n\n<p>To create an anonymous class, pass <code>null</code> for the <code>className</code>:</p>\n\n<pre><code> <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>(null, {\n     constructor: function () {\n         // ...\n     }\n });\n</code></pre>\n\n<p>In some cases, it is helpful to create a nested scope to contain some private\nproperties. The best way to do this is to pass a function instead of an object\nas the second parameter. This function will be called to produce the class\nbody:</p>\n\n<pre><code> <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('MyApp.foo.Bar', function () {\n     var id = 0;\n\n     return {\n         nextId: function () {\n             return ++id;\n         }\n     };\n });\n</code></pre>\n\n<p><em>Note</em> that when using override, the above syntax will not override successfully, because\nthe passed function would need to be executed first to determine whether or not the result\nis an override or defining a new object. As such, an alternative syntax that immediately\ninvokes the function can be used:</p>\n\n<pre><code> <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('MyApp.override.BaseOverride', function () {\n     var counter = 0;\n\n     return {\n         override: 'Tk.Component',\n         logId: function () {\n             console.log(++counter, this.id);\n         }\n     };\n }());\n</code></pre>\n\n<p>When using this form of <code><a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a></code>, the function is passed a reference to its\nclass. This can be used as an efficient way to access any static properties you\nmay have:</p>\n\n<pre><code> <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('MyApp.foo.Bar', function (Bar) {\n     return {\n         statics: {\n             staticMethod: function () {\n                 // ...\n             }\n         },\n\n         method: function () {\n             return Bar.staticMethod();\n         }\n     };\n });\n</code></pre>\n\n<p>To define an override, include the <code>override</code> property. The content of an\noverride is aggregated with the specified class in order to extend or modify\nthat class. This can be as simple as setting default property values or it can\nextend and/or replace methods. This can also extend the statics of the class.</p>\n\n<p>One use for an override is to break a large class into manageable pieces.</p>\n\n<pre><code> // File: /src/app/Panel.js\n\n <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('My.app.Panel', {\n     extend: 'Tk.panel.Panel',\n     requires: [\n         'My.app.PanelPart2',\n         'My.app.PanelPart3'\n     ]\n\n     constructor: function (config) {\n         this.callParent(arguments); // calls Tk.panel.Panel's constructor\n         //...\n     },\n\n     statics: {\n         method: function () {\n             return 'abc';\n         }\n     }\n });\n\n // File: /src/app/PanelPart2.js\n <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('My.app.PanelPart2', {\n     override: 'My.app.Panel',\n\n     constructor: function (config) {\n         this.callParent(arguments); // calls My.app.Panel's constructor\n         //...\n     }\n });\n</code></pre>\n\n<p>Another use of overrides is to provide optional parts of classes that can be\nindependently required. In this case, the class may even be unaware of the\noverride altogether.</p>\n\n<pre><code> <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('My.ux.CoolTip', {\n     override: 'Tk.tip.ToolTip',\n\n     constructor: function (config) {\n         this.callParent(arguments); // calls Tk.tip.ToolTip's constructor\n         //...\n     }\n });\n</code></pre>\n\n<p>The above override can now be required as normal.</p>\n\n<pre><code> <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('My.app.App', {\n     requires: [\n         'My.ux.CoolTip'\n     ]\n });\n</code></pre>\n\n<p>Overrides can also contain statics, inheritableStatics, or privates:</p>\n\n<pre><code> <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('My.app.BarMod', {\n     override: 'Tk.foo.Bar',\n\n     statics: {\n         method: function (x) {\n             return this.callParent([x * 2]); // call Tk.foo.Bar.method\n         }\n     }\n });\n</code></pre>\n\n<p>Starting in version 4.2.2, overrides can declare their <code>compatibility</code> based\non the framework version or on versions of other packages. For details on the\nsyntax and options for these checks, see <code>Tk.checkVersion</code>.</p>\n\n<p>The simplest use case is to test framework version for compatibility:</p>\n\n<pre><code> <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('App.overrides.grid.Panel', {\n     override: 'Tk.grid.Panel',\n\n     compatibility: '4.2.2', // only if framework version is 4.2.2\n\n     //...\n });\n</code></pre>\n\n<p>An array is treated as an OR, so if any specs match, the override is\ncompatible.</p>\n\n<pre><code> <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('App.overrides.some.Thing', {\n     override: 'Foo.some.Thing',\n\n     compatibility: [\n         '4.2.2',\n         'foo@1.0.1-1.0.2'\n     ],\n\n     //...\n });\n</code></pre>\n\n<p>To require that all specifications match, an object can be provided:</p>\n\n<pre><code> <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('App.overrides.some.Thing', {\n     override: 'Foo.some.Thing',\n\n     compatibility: {\n         and: [\n             '4.2.2',\n             'foo@1.0.1-1.0.2'\n         ]\n     },\n\n     //...\n });\n</code></pre>\n\n<p>Because the object form is just a recursive check, these can be nested:</p>\n\n<pre><code> <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('App.overrides.some.Thing', {\n     override: 'Foo.some.Thing',\n\n     compatibility: {\n         and: [\n             '4.2.2',  // exactly version 4.2.2 of the framework *AND*\n             {\n                 // either (or both) of these package specs:\n                 or: [\n                     'foo@1.0.1-1.0.2',\n                     'bar@3.0+'\n                 ]\n             }\n         ]\n     },\n\n     //...\n });\n</code></pre>\n\n<p>IMPORTANT: An override is only included in a build if the class it overrides is\nrequired. Otherwise, the override, like the target class, is not included. In\nSencha Cmd v4, the <code>compatibility</code> declaration can likewise be used to remove\nincompatible overrides from a build.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>className</span> : String<div class='sub-desc'><p>The class name to create in string dot-namespaced format, for example:\n'My.very.awesome.Class', 'FeedViewer.plugin.CoolPager'\nIt is highly recommended to follow this simple convention:\n - The root and the class name are 'CamelCased'\n - Everything else is lower-cased\nPass <code>null</code> to create an anonymous class.</p>\n</div></li><li><span class='pre'>data</span> : Object<div class='sub-desc'><p>The key - value pairs of properties to apply to this class. Property names can be of any valid\nstrings, except those in the reserved listed below:</p>\n\n<ul>\n<li><a href=\"#!/api/Tk.Class-cfg-alias\" rel=\"Tk.Class-cfg-alias\" class=\"docClass\">alias</a></li>\n<li><a href=\"#!/api/Tk.Class-cfg-alternateClassName\" rel=\"Tk.Class-cfg-alternateClassName\" class=\"docClass\">alternateClassName</a></li>\n<li>cachedConfig</li>\n<li>config</li>\n<li><a href=\"#!/api/Tk.Class-cfg-extend\" rel=\"Tk.Class-cfg-extend\" class=\"docClass\">extend</a></li>\n<li><a href=\"#!/api/Tk.Class-cfg-inheritableStatics\" rel=\"Tk.Class-cfg-inheritableStatics\" class=\"docClass\">inheritableStatics</a></li>\n<li><a href=\"#!/api/Tk.Class-cfg-mixins\" rel=\"Tk.Class-cfg-mixins\" class=\"docClass\">mixins</a></li>\n<li><a href=\"#!/api/Tk.Class-cfg-override\" rel=\"Tk.Class-cfg-override\" class=\"docClass\">override</a></li>\n<li>platformConfig</li>\n<li>privates</li>\n<li><a href=\"#!/api/Tk.Class-cfg-requires\" rel=\"Tk.Class-cfg-requires\" class=\"docClass\">requires</a></li>\n<li><code>self</code></li>\n<li><a href=\"#!/api/Tk.Class-cfg-singleton\" rel=\"Tk.Class-cfg-singleton\" class=\"docClass\">singleton</a></li>\n<li><a href=\"#!/api/Tk.Class-cfg-statics\" rel=\"Tk.Class-cfg-statics\" class=\"docClass\">statics</a></li>\n<li><a href=\"#!/api/Tk.Class-cfg-uses\" rel=\"Tk.Class-cfg-uses\" class=\"docClass\">uses</a></li>\n<li><a href=\"#!/api/Tk.Class-cfg-xtype\" rel=\"Tk.Class-cfg-xtype\" class=\"docClass\">xtype</a> (for Components only)</li>\n</ul>\n\n</div></li><li><span class='pre'>createdFn</span> : Function (optional)<div class='sub-desc'><p>Callback to execute after the class is created, the execution scope of which\n(<code>this</code>) will be the newly created class itself.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Tk.Base\" rel=\"Tk.Base\" class=\"docClass\">Tk.Base</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-exclude' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/Loader.html#Tk-method-exclude' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-exclude' class='name expandable'>exclude</a>( <span class='pre'>excludes</span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Explicitly exclude files from being loaded. ...</div><div class='long'><p>Explicitly exclude files from being loaded. Useful when used in conjunction with a\nbroad include expression. Can be chained with more <code>require</code> and <code>exclude</code> methods,\nfor example:</p>\n\n<pre><code><a href=\"#!/api/Tk-method-exclude\" rel=\"Tk-method-exclude\" class=\"docClass\">Tk.exclude</a>('Tk.data.*').require('*');\n\n<a href=\"#!/api/Tk-method-exclude\" rel=\"Tk-method-exclude\" class=\"docClass\">Tk.exclude</a>('widget.button*').require('widget.*');\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>excludes</span> : String/String[]<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>Contains <code>exclude</code>, <code>require</code> and <code>syncRequire</code> methods for chaining.</p>\n</div></li></ul></div></div></div><div id='method-getClass' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/ClassManager.html#Tk-method-getClass' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-getClass' class='name expandable'>getClass</a>( <span class='pre'>object</span> ) : <a href=\"#!/api/Tk.Class\" rel=\"Tk.Class\" class=\"docClass\">Tk.Class</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Get the class of the provided object; returns null if it's not an instance\nof any class created with Tk.define. ...</div><div class='long'><p>Get the class of the provided object; returns null if it's not an instance\nof any class created with <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>. This is usually invoked by the\nshorthand <a href=\"#!/api/Tk-method-getClass\" rel=\"Tk-method-getClass\" class=\"docClass\">getClass</a>.</p>\n\n<pre><code>var component = new Tk.Component();\n\n<a href=\"#!/api/Tk-method-getClass\" rel=\"Tk-method-getClass\" class=\"docClass\">Tk.getClass</a>(component); // returns Tk.Component\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object</span> : Object<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Tk.Class\" rel=\"Tk.Class\" class=\"docClass\">Tk.Class</a></span><div class='sub-desc'><p>class</p>\n\n</div></li></ul></div></div></div><div id='method-getClassName' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/ClassManager.html#Tk-method-getClassName' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-getClassName' class='name expandable'>getClassName</a>( <span class='pre'>object</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the name of the class by its reference or its instance. ...</div><div class='long'><p>Get the name of the class by its reference or its instance. This is\nusually invoked by the shorthand <a href=\"#!/api/Tk-method-getClassName\" rel=\"Tk-method-getClassName\" class=\"docClass\">getClassName</a>.</p>\n\n<pre><code><a href=\"#!/api/Tk.ClassManager-method-getName\" rel=\"Tk.ClassManager-method-getName\" class=\"docClass\">Tk.ClassManager.getName</a>(Tk.Action); // returns \"Tk.Action\"\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object</span> : <a href=\"#!/api/Tk.Class\" rel=\"Tk.Class\" class=\"docClass\">Tk.Class</a>/Object<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>className</p>\n\n</div></li></ul></div></div></div><div id='method-id' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/Tk.html#Tk-method-id' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-id' class='name expandable'>id</a>( <span class='pre'>[o], [prefix]</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Generates unique ids. ...</div><div class='long'><p>Generates unique ids. If the object/element is passes and it already has an <code>id</code>, it is unchanged.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>o</span> : Object (optional)<div class='sub-desc'><p>The object to generate an id for.</p>\n</div></li><li><span class='pre'>prefix</span> : String (optional)<div class='sub-desc'><p>The <code>id</code> prefix.</p>\n<p>Defaults to: <code>tk-gen</code></p></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The generated <code>id</code>.</p>\n</div></li></ul></div></div></div><div id='method-isArray' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/Tk.html#Tk-method-isArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-isArray' class='name expandable'>isArray</a>( <span class='pre'>target</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>如果参数是一个 JS 数组 对象则返回 true,否则 false ...</div><div class='long'><p>如果参数是一个 JS 数组 对象则返回 <code>true</code>,否则 <code>false</code></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>target</span> : Object<div class='sub-desc'><p>需要检测的目标</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isBoolean' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/Tk.html#Tk-method-isBoolean' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-isBoolean' class='name expandable'>isBoolean</a>( <span class='pre'>value</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>如果参数是个布尔值，那么返回 true ...</div><div class='long'><p>如果参数是个布尔值，那么返回 <code>true</code></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>需要检测的值</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isDate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/Tk.html#Tk-method-isDate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-isDate' class='name expandable'>isDate</a>( <span class='pre'>object</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>如果参数是一个 JS Date 对象则返回 true,否则 false ...</div><div class='long'><p>如果参数是一个 JS Date 对象则返回 <code>true</code>,否则 <code>false</code></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object</span> : Object<div class='sub-desc'><p>需要检测的对象</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isDefined' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/Tk.html#Tk-method-isDefined' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-isDefined' class='name expandable'>isDefined</a>( <span class='pre'>value</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the passed value is defined. ...</div><div class='long'><p>Returns <code>true</code> if the passed value is defined.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>需要检测的值</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isElement' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/Tk.html#Tk-method-isElement' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-isElement' class='name expandable'>isElement</a>( <span class='pre'>value</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the passed value is an HTMLElement ...</div><div class='long'><p>Returns <code>true</code> if the passed value is an HTMLElement</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>需要检测的值</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isEmpty' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/Tk.html#Tk-method-isEmpty' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-isEmpty' class='name expandable'>isEmpty</a>( <span class='pre'>value, [allowEmptyString]</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>如果 value 为 “空” 则返回 true，下列情况都属于“空”\n\n\nnull\nundefined\n空数组\n空字符串 (除非 allowEmptyString 参数 为 true) ...</div><div class='long'><p>如果 <code>value</code> 为 “空” 则返回 true，下列情况都属于“空”</p>\n\n<ul>\n<li><code>null</code></li>\n<li><code>undefined</code></li>\n<li>空数组</li>\n<li>空字符串 (除非 <code>allowEmptyString</code> 参数 为 <code>true</code>)</li>\n</ul>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>需要检测的值</p>\n</div></li><li><span class='pre'>allowEmptyString</span> : Boolean (optional)<div class='sub-desc'><p><code>true</code> 允许空字符串表示“有值”</p>\n<p>Defaults to: <code>false</code></p></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isFunction' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/Tk.html#Tk-method-isFunction' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-isFunction' class='name expandable'>isFunction</a>( <span class='pre'>value</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>如果参数是一个 JS 函数，则返回 true，否则返回 false ...</div><div class='long'><p>如果参数是一个 JS 函数，则返回 <code>true</code>，否则返回 <code>false</code></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>需要检测的值</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isNumber' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/Tk.html#Tk-method-isNumber' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-isNumber' class='name expandable'>isNumber</a>( <span class='pre'>value</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>如果参数是一个有限数字，那么返回 true，非数字或者无限数字都返回 false ...</div><div class='long'><p>如果参数是一个有限数字，那么返回 <code>true</code>，非数字或者无限数字都返回 <code>false</code></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>需要检测的值</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isNumeric' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/Tk.html#Tk-method-isNumeric' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-isNumeric' class='name expandable'>isNumeric</a>( <span class='pre'>value</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>检测是一个值是否长得像数字 ...</div><div class='long'><p>检测是一个值是否长得像数字</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>例如: 1, '1', '2.34'</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>像则返回 True</p>\n</div></li></ul></div></div></div><div id='method-isObject' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/Tk.html#Tk-method-isObject' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-isObject' class='name expandable'>isObject</a>( <span class='pre'>value</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>如果参数是一个 JS Object 对象则返回 true,否则 false ...</div><div class='long'><p>如果参数是一个 JS Object 对象则返回 <code>true</code>,否则 <code>false</code></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>需要检测的值</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isPrimitive' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/Tk.html#Tk-method-isPrimitive' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-isPrimitive' class='name expandable'>isPrimitive</a>( <span class='pre'>value</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>如果参数是一个 JS '字面量' (string/number/boolean)，则返回 true，否则返回 false ...</div><div class='long'><p>如果参数是一个 JS '字面量' (string/number/boolean)，则返回 <code>true</code>，否则返回 <code>false</code></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>需要检测的值</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isSimpleObject' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/Tk.html#Tk-method-isSimpleObject' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-isSimpleObject' class='name expandable'>isSimpleObject</a>( <span class='pre'>value</span> )<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'></div></li></ul></div></div></div><div id='method-isString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/Tk.html#Tk-method-isString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-isString' class='name expandable'>isString</a>( <span class='pre'>value</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>如果参数是个字符串，那么返回 true ...</div><div class='long'><p>如果参数是个字符串，那么返回 <code>true</code></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>需要检测的值</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isTextNode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/Tk.html#Tk-method-isTextNode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-isTextNode' class='name expandable'>isTextNode</a>( <span class='pre'>value</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the passed value is a TextNode ...</div><div class='long'><p>Returns <code>true</code> if the passed value is a TextNode</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>需要检测的值</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-namespace' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/ClassManager.html#Tk-method-namespace' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-namespace' class='name expandable'>namespace</a>( <span class='pre'>namespaces</span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates namespaces to be used for scoping variables and classes so that they are not global. ...</div><div class='long'><p>Creates namespaces to be used for scoping variables and classes so that they are not global.\nSpecifying the last node of a namespace implicitly creates all other nodes. Usage:</p>\n\n<pre><code><a href=\"#!/api/Tk-method-namespace\" rel=\"Tk-method-namespace\" class=\"docClass\">Tk.namespace</a>('Company', 'Company.data');\n\n// equivalent and preferable to the above syntax\n<a href=\"#!/api/Tk-method-ns\" rel=\"Tk-method-ns\" class=\"docClass\">Tk.ns</a>('Company.data');\n\nCompany.Widget = function() { ... };\n\nCompany.data.CustomStore = function(config) { ... };\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>namespaces</span> : String...<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>The (last) namespace object created.</p>\n\n</div></li></ul></div></div></div><div id='method-ns' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/ClassManager.html#Tk-method-ns' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-ns' class='name expandable'>ns</a>( <span class='pre'>namespaces</span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Convenient alias for Tk.namespace. ...</div><div class='long'><p>Convenient alias for <a href=\"#!/api/Tk-method-namespace\" rel=\"Tk-method-namespace\" class=\"docClass\">Tk.namespace</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>namespaces</span> : String...<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>The (last) namespace object created.</p>\n\n</div></li></ul></div></div></div><div id='method-override' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/Tk.html#Tk-method-override' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-override' class='name expandable'>override</a>( <span class='pre'>target, overrides</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Overrides members of the specified target with the given values. ...</div><div class='long'><p>Overrides members of the specified <code>target</code> with the given values.</p>\n\n<p>If the <code>target</code> is a class declared using <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>, the\n<code>override</code> method of that class is called (see <a href=\"#!/api/Tk.Base-static-method-override\" rel=\"Tk.Base-static-method-override\" class=\"docClass\">Tk.Base.override</a>) given\nthe <code>overrides</code>.</p>\n\n<p>If the <code>target</code> is a function, it is assumed to be a constructor and the contents\nof <code>overrides</code> are applied to its <code>prototype</code> using <a href=\"#!/api/Tk-method-apply\" rel=\"Tk-method-apply\" class=\"docClass\">Tk.apply</a>.</p>\n\n<p>If the <code>target</code> is an instance of a class declared using <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>,\nthe <code>overrides</code> are applied to only that instance. In this case, methods are\nspecially processed to allow them to use <a href=\"#!/api/Tk.Base-method-callParent\" rel=\"Tk.Base-method-callParent\" class=\"docClass\">Tk.Base.callParent</a>.</p>\n\n<pre><code> var panel = new Tk.Panel({ ... });\n\n <a href=\"#!/api/Tk-method-override\" rel=\"Tk-method-override\" class=\"docClass\">Tk.override</a>(panel, {\n     initComponent: function () {\n         // extra processing...\n\n         this.callParent();\n     }\n });\n</code></pre>\n\n<p>If the <code>target</code> is none of these, the <code>overrides</code> are applied to the <code>target</code>\nusing <a href=\"#!/api/Tk-method-apply\" rel=\"Tk-method-apply\" class=\"docClass\">Tk.apply</a>.</p>\n\n<p>Please refer to <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a> and <a href=\"#!/api/Tk.Base-static-method-override\" rel=\"Tk.Base-static-method-override\" class=\"docClass\">Tk.Base.override</a> for\nfurther details.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>target</span> : Object<div class='sub-desc'><p>The target to override.</p>\n</div></li><li><span class='pre'>overrides</span> : Object<div class='sub-desc'><p>The properties to add or replace on <code>target</code>.</p>\n</div></li></ul></div></div></div><div id='method-require' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/Loader.html#Tk-method-require' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-require' class='name expandable'>require</a>( <span class='pre'>expressions, [fn], [scope]</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Loads all classes by the given names and all their direct dependencies; optionally\nexecutes the given callback functi...</div><div class='long'><p>Loads all classes by the given names and all their direct dependencies; optionally\nexecutes the given callback function when finishes, within the optional scope.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>expressions</span> : String/String[]<div class='sub-desc'><p>The class, classes or wildcards to load.</p>\n</div></li><li><span class='pre'>fn</span> : Function (optional)<div class='sub-desc'><p>The callback function.</p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The execution scope (<code>this</code>) of the callback function.</p>\n</div></li></ul></div></div></div><div id='method-syncRequire' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/Loader.html#Tk-method-syncRequire' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-syncRequire' class='name expandable'>syncRequire</a>( <span class='pre'>expressions, [fn], [scope]</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Synchronously loads all classes by the given names and all their direct dependencies; optionally\nexecutes the given c...</div><div class='long'><p>Synchronously loads all classes by the given names and all their direct dependencies; optionally\nexecutes the given callback function when finishes, within the optional scope.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>expressions</span> : String/String[]<div class='sub-desc'><p>The class, classes or wildcards to load.</p>\n</div></li><li><span class='pre'>fn</span> : Function (optional)<div class='sub-desc'><p>The callback function.</p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The execution scope (<code>this</code>) of the callback function.</p>\n</div></li></ul></div></div></div><div id='method-widget' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk'>Tk</span><br/><a href='source/ClassManager.html#Tk-method-widget' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk-method-widget' class='name expandable'>widget</a>( <span class='pre'>[name], [config]</span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Convenient shorthand to create a widget by its xtype or a config object. ...</div><div class='long'><p>Convenient shorthand to create a widget by its xtype or a config object.</p>\n\n<pre><code> var button = <a href=\"#!/api/Tk-method-widget\" rel=\"Tk-method-widget\" class=\"docClass\">Tk.widget</a>('button'); // Equivalent to <a href=\"#!/api/Tk-method-create\" rel=\"Tk-method-create\" class=\"docClass\">Tk.create</a>('widget.button');\n\n var panel = <a href=\"#!/api/Tk-method-widget\" rel=\"Tk-method-widget\" class=\"docClass\">Tk.widget</a>('panel', { // Equivalent to <a href=\"#!/api/Tk-method-create\" rel=\"Tk-method-create\" class=\"docClass\">Tk.create</a>('widget.panel')\n     title: 'Panel'\n });\n\n var grid = <a href=\"#!/api/Tk-method-widget\" rel=\"Tk-method-widget\" class=\"docClass\">Tk.widget</a>({\n     xtype: 'grid',\n     ...\n });\n</code></pre>\n\n<p>If a component instance is passed, it is simply returned.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String (optional)<div class='sub-desc'><p>The xtype of the widget to create.</p>\n</div></li><li><span class='pre'>config</span> : Object (optional)<div class='sub-desc'><p>The configuration object for the widget constructor.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>The widget instance</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});