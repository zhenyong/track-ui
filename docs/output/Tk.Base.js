Ext.data.JsonP.Tk_Base({"tagname":"class","name":"Tk.Base","autodetected":{},"files":[{"filename":"Base.js","href":"Base.html#Tk-Base"}],"members":[{"name":"$className","tagname":"property","owner":"Tk.Base","id":"property-S-className","meta":{"private":true}},{"name":"destroyed","tagname":"property","owner":"Tk.Base","id":"property-destroyed","meta":{"protected":true}},{"name":"isInstance","tagname":"property","owner":"Tk.Base","id":"property-isInstance","meta":{"protected":true,"readonly":true}},{"name":"self","tagname":"property","owner":"Tk.Base","id":"property-self","meta":{"protected":true}},{"name":"$onExtended","tagname":"property","owner":"Tk.Base","id":"static-property-S-onExtended","meta":{"private":true,"static":true}},{"name":"callParent","tagname":"method","owner":"Tk.Base","id":"method-callParent","meta":{"protected":true}},{"name":"callSuper","tagname":"method","owner":"Tk.Base","id":"method-callSuper","meta":{"protected":true}},{"name":"destroy","tagname":"method","owner":"Tk.Base","id":"method-destroy","meta":{}},{"name":"link","tagname":"method","owner":"Tk.Base","id":"method-link","meta":{"private":true}},{"name":"statics","tagname":"method","owner":"Tk.Base","id":"method-statics","meta":{"protected":true}},{"name":"unlink","tagname":"method","owner":"Tk.Base","id":"method-unlink","meta":{"chainable":true,"private":true}},{"name":"addInheritableStatics","tagname":"method","owner":"Tk.Base","id":"static-method-addInheritableStatics","meta":{"chainable":true,"private":true,"static":true}},{"name":"addMember","tagname":"method","owner":"Tk.Base","id":"static-method-addMember","meta":{"chainable":true,"private":true,"static":true}},{"name":"addMembers","tagname":"method","owner":"Tk.Base","id":"static-method-addMembers","meta":{"chainable":true,"static":true}},{"name":"addStatics","tagname":"method","owner":"Tk.Base","id":"static-method-addStatics","meta":{"chainable":true,"static":true}},{"name":"callParent","tagname":"method","owner":"Tk.Base","id":"static-method-callParent","meta":{"protected":true,"static":true}},{"name":"callSuper","tagname":"method","owner":"Tk.Base","id":"static-method-callSuper","meta":{"protected":true,"static":true}},{"name":"create","tagname":"method","owner":"Tk.Base","id":"static-method-create","meta":{"static":true}},{"name":"extend","tagname":"method","owner":"Tk.Base","id":"static-method-extend","meta":{"private":true,"static":true}},{"name":"getName","tagname":"method","owner":"Tk.Base","id":"static-method-getName","meta":{"static":true}},{"name":"mixin","tagname":"method","owner":"Tk.Base","id":"static-method-mixin","meta":{"private":true,"static":true}},{"name":"onExtended","tagname":"method","owner":"Tk.Base","id":"static-method-onExtended","meta":{"chainable":true,"private":true,"static":true}},{"name":"override","tagname":"method","owner":"Tk.Base","id":"static-method-override","meta":{"static":true}},{"name":"triggerExtended","tagname":"method","owner":"Tk.Base","id":"static-method-triggerExtended","meta":{"private":true,"static":true}}],"alternateClassNames":[],"aliases":{},"id":"class-Tk.Base","short_doc":"所有类的祖先 Tk.define. ...","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Base.html#Tk-Base' target='_blank'>Base.js</a></div></pre><div class='doc-contents'><p>所有类的祖先 <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>.</p>\n\n<p>Tk 管理的所有类都继承自 <a href=\"#!/api/Tk.Base\" rel=\"Tk.Base\" class=\"docClass\">Tk.Base</a>。\n<a href=\"#!/api/Tk.Base\" rel=\"Tk.Base\" class=\"docClass\">Tk.Base</a> 的所有原型或静态成员都会被其他类继承</p>\n</div><div class='members'><div class='members-section'><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Instance properties</h3><div id='property-S-className' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Base'>Tk.Base</span><br/><a href='source/Base.html#Tk-Base-property-S-className' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Base-property-S-className' class='name expandable'>$className</a> : String<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>&#39;Tk.Base&#39;</code></p></div></div></div><div id='property-destroyed' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Base'>Tk.Base</span><br/><a href='source/Base.html#Tk-Base-property-destroyed' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Base-property-destroyed' class='name expandable'>destroyed</a> : Boolean<span class=\"signature\"><span class='protected' >protected</span></span></div><div class='description'><div class='short'>destroy 方法调用后设置为 true ...</div><div class='long'><p><code>destroy</code> 方法调用后设置为 <code>true</code></p>\n<p>Defaults to: <code>false</code></p></div></div></div><div id='property-isInstance' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Base'>Tk.Base</span><br/><a href='source/Base.html#Tk-Base-property-isInstance' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Base-property-isInstance' class='name expandable'>isInstance</a> : Boolean<span class=\"signature\"><span class='protected' >protected</span><span class='readonly' >readonly</span></span></div><div class='description'><div class='short'>用来区分字面量对象和类实例对象 ...</div><div class='long'><p>用来区分字面量对象和类实例对象</p>\n<p>Defaults to: <code>true</code></p></div></div></div><div id='property-self' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Base'>Tk.Base</span><br/><a href='source/Base.html#Tk-Base-property-self' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Base-property-self' class='name expandable'>self</a> : <a href=\"#!/api/Tk.Class\" rel=\"Tk.Class\" class=\"docClass\">Tk.Class</a><span class=\"signature\"><span class='protected' >protected</span></span></div><div class='description'><div class='short'>Get the reference to the current class from which this object was instantiated. ...</div><div class='long'><p>Get the reference to the current class from which this object was instantiated. Unlike <a href=\"#!/api/Tk.Base-method-statics\" rel=\"Tk.Base-method-statics\" class=\"docClass\">statics</a>,\n<code>this.self</code> is scope-dependent and it's meant to be used for dynamic inheritance. See <a href=\"#!/api/Tk.Base-method-statics\" rel=\"Tk.Base-method-statics\" class=\"docClass\">statics</a>\nfor a detailed comparison</p>\n\n<pre><code><a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('My.Cat', {\n    statics: {\n        speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n    },\n\n    constructor: function() {\n        alert(this.self.speciesName); // dependent on 'this'\n    },\n\n    clone: function() {\n        return new this.self();\n    }\n});\n\n\n<a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('My.SnowLeopard', {\n    extend: 'My.Cat',\n    statics: {\n        speciesName: 'Snow Leopard'         // My.SnowLeopard.speciesName = 'Snow Leopard'\n    }\n});\n\nvar cat = new My.Cat();                     // alerts 'Cat'\nvar snowLeopard = new My.SnowLeopard();     // alerts 'Snow Leopard'\n\nvar clone = snowLeopard.clone();\nalert(<a href=\"#!/api/Tk-method-getClassName\" rel=\"Tk-method-getClassName\" class=\"docClass\">Tk.getClassName</a>(clone));             // alerts 'My.SnowLeopard'\n</code></pre>\n</div></div></div></div><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Static properties</h3><div id='static-property-S-onExtended' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Base'>Tk.Base</span><br/><a href='source/Base.html#Tk-Base-static-property-S-onExtended' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Base-static-property-S-onExtended' class='name expandable'>$onExtended</a> : Array<span class=\"signature\"><span class='private' >private</span><span class='static' >static</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>[]</code></p></div></div></div></div></div><div class='members-section'><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Instance methods</h3><div id='method-callParent' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Base'>Tk.Base</span><br/><a href='source/Base.html#Tk-Base-method-callParent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Base-method-callParent' class='name expandable'>callParent</a>( <span class='pre'>args</span> ) : Object<span class=\"signature\"><span class='protected' >protected</span></span></div><div class='description'><div class='short'>Call the \"parent\" method of the current method. ...</div><div class='long'><p>Call the \"parent\" method of the current method. That is the method previously\noverridden by derivation or by an override (see <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>).</p>\n\n<pre><code> <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('My.Base', {\n     constructor: function (x) {\n         this.x = x;\n     },\n\n     statics: {\n         method: function (x) {\n             return x;\n         }\n     }\n });\n\n <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('My.Derived', {\n     extend: 'My.Base',\n\n     constructor: function () {\n         this.callParent([21]);\n     }\n });\n\n var obj = new My.Derived();\n\n alert(obj.x);  // alerts 21\n</code></pre>\n\n<p>This can be used with an override as follows:</p>\n\n<pre><code> <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('My.DerivedOverride', {\n     override: 'My.Derived',\n\n     constructor: function (x) {\n         this.callParent([x*2]); // calls original My.Derived constructor\n     }\n });\n\n var obj = new My.Derived();\n\n alert(obj.x);  // now alerts 42\n</code></pre>\n\n<p>This also works with static and private methods.</p>\n\n<pre><code> <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('My.Derived2', {\n     extend: 'My.Base',\n\n     // privates: {\n     statics: {\n         method: function (x) {\n             return this.callParent([x*2]); // calls My.Base.method\n         }\n     }\n });\n\n alert(My.Base.method(10));     // alerts 10\n alert(My.Derived2.method(10)); // alerts 20\n</code></pre>\n\n<p>Lastly, it also works with overridden static methods.</p>\n\n<pre><code> <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('My.Derived2Override', {\n     override: 'My.Derived2',\n\n     // privates: {\n     statics: {\n         method: function (x) {\n             return this.callParent([x*2]); // calls My.Derived2.method\n         }\n     }\n });\n\n alert(My.Derived2.method(10); // now alerts 40\n</code></pre>\n\n<p>To override a method and replace it and also call the superclass method, use\n<a href=\"#!/api/Tk.Base-method-callSuper\" rel=\"Tk.Base-method-callSuper\" class=\"docClass\">callSuper</a>. This is often done to patch a method to fix a bug.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Array/Arguments<div class='sub-desc'><p>The arguments, either an array or the <code>arguments</code> object\nfrom the current method, for example: <code>this.callParent(arguments)</code></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>Returns the result of calling the parent method</p>\n</div></li></ul></div></div></div><div id='method-callSuper' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Base'>Tk.Base</span><br/><a href='source/Base.html#Tk-Base-method-callSuper' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Base-method-callSuper' class='name expandable'>callSuper</a>( <span class='pre'>args</span> ) : Object<span class=\"signature\"><span class='protected' >protected</span></span></div><div class='description'><div class='short'>This method is used by an override to call the superclass method but\nbypass any overridden method. ...</div><div class='long'><p>This method is used by an <strong>override</strong> to call the superclass method but\nbypass any overridden method. This is often done to \"patch\" a method that\ncontains a bug but for whatever reason cannot be fixed directly.</p>\n\n<p>Consider:</p>\n\n<pre><code> <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('Tk.some.Class', {\n     method: function () {\n         console.log('Good');\n     }\n });\n\n <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('Tk.some.DerivedClass', {\n     extend: 'Tk.some.Class',\n\n     method: function () {\n         console.log('Bad');\n\n         // ... logic but with a bug ...\n\n         this.callParent();\n     }\n });\n</code></pre>\n\n<p>To patch the bug in <code>Tk.some.DerivedClass.method</code>, the typical solution is to create an\noverride:</p>\n\n<pre><code> <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('App.patches.DerivedClass', {\n     override: 'Tk.some.DerivedClass',\n\n     method: function () {\n         console.log('Fixed');\n\n         // ... logic but with bug fixed ...\n\n         this.callSuper();\n     }\n });\n</code></pre>\n\n<p>The patch method cannot use <a href=\"#!/api/Tk.Base-method-callParent\" rel=\"Tk.Base-method-callParent\" class=\"docClass\">callParent</a> to call the superclass\n<code>method</code> since that would call the overridden method containing the bug. In\nother words, the above patch would only produce \"Fixed\" then \"Good\" in the\nconsole log, whereas, using <code>callParent</code> would produce \"Fixed\" then \"Bad\"\nthen \"Good\".</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Array/Arguments<div class='sub-desc'><p>The arguments, either an array or the <code>arguments</code> object\nfrom the current method, for example: <code>this.callSuper(arguments)</code></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>Returns the result of calling the superclass method</p>\n</div></li></ul></div></div></div><div id='method-destroy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Base'>Tk.Base</span><br/><a href='source/Base.html#Tk-Base-method-destroy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Base-method-destroy' class='name expandable'>destroy</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>该方法用来清理对象和相关资源，该方法调用后，不能再使用该实例 ...</div><div class='long'><p>该方法用来清理对象和相关资源，该方法调用后，不能再使用该实例</p>\n</div></div></div><div id='method-link' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Base'>Tk.Base</span><br/><a href='source/Base.html#Tk-Base-method-link' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Base-method-link' class='name expandable'>link</a>( <span class='pre'>name, value</span> ) : Object<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'>关联 \"可销毁\" 对象，这些关联的对象会在实例销毁时一并销毁 (通过 destroy). ...</div><div class='long'><p>关联 \"可销毁\" 对象，这些关联的对象会在实例销毁时一并销毁 (通过 <code><a href=\"#!/api/Tk.Base-method-destroy\" rel=\"Tk.Base-method-destroy\" class=\"docClass\">destroy</a></code>).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'>\n</div></li><li><span class='pre'>value</span> : Object<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>参数 <code>value</code></p>\n</div></li></ul></div></div></div><div id='method-statics' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Base'>Tk.Base</span><br/><a href='source/Base.html#Tk-Base-method-statics' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Base-method-statics' class='name expandable'>statics</a>( <span class='pre'></span> ) : <a href=\"#!/api/Tk.Class\" rel=\"Tk.Class\" class=\"docClass\">Tk.Class</a><span class=\"signature\"><span class='protected' >protected</span></span></div><div class='description'><div class='short'>如果在某个类的方法内调用 this.statics() 返回该个类的静态成员，与作用于无关，无论 this 指向谁\n如果不是在方法内调用 this.statics()，那么实例 this 对应的\n\nTk.define('My.Cat'...</div><div class='long'><p>如果在某个类的方法内调用 <code>this.statics()</code> 返回该个类的静态成员，与作用于无关，无论 <code>this</code> 指向谁\n如果不是在方法内调用 <code>this.statics()</code>，那么实例 this 对应的</p>\n\n<pre><code><a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('My.Cat', {\n    statics: {\n        totalCreated: 0,\n        speciesName: 'Cat' // My.Cat.speciesName = 'Cat'\n    },\n\n    constructor: function() {\n        var statics = this.statics();\n\n        alert(statics.speciesName);     // always equals to 'Cat' no matter what 'this' refers to\n                                        // equivalent to: My.Cat.speciesName\n\n        alert(this.self.speciesName);   // dependent on 'this'\n\n        statics.totalCreated++;\n    },\n\n    clone: function() {\n        var cloned = new this.self();   // dependent on 'this'\n\n        cloned.groupName = this.statics().speciesName;   // equivalent to: My.Cat.speciesName\n\n        return cloned;\n    }\n});\n\n\n<a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('My.SnowLeopard', {\n    extend: 'My.Cat',\n\n    statics: {\n        speciesName: 'Snow Leopard'     // My.SnowLeopard.speciesName = 'Snow Leopard'\n    },\n\n    constructor: function() {\n        this.callParent();\n    }\n});\n\nvar cat = new My.Cat();                 // alerts 'Cat', then alerts 'Cat'\n\nvar snowLeopard = new My.SnowLeopard(); // alerts 'Cat', then alerts 'Snow Leopard'\n\nvar clone = snowLeopard.clone();\nalert(<a href=\"#!/api/Tk-method-getClassName\" rel=\"Tk-method-getClassName\" class=\"docClass\">Tk.getClassName</a>(clone));         // alerts 'My.SnowLeopard'\nalert(clone.groupName);                 // alerts 'Cat'\n\nalert(My.Cat.totalCreated);             // alerts 3\n</code></pre>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Tk.Class\" rel=\"Tk.Class\" class=\"docClass\">Tk.Class</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-unlink' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Base'>Tk.Base</span><br/><a href='source/Base.html#Tk-Base-method-unlink' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Base-method-unlink' class='name expandable'>unlink</a>( <span class='pre'>names</span> ) : <a href=\"#!/api/Tk.Base\" rel=\"Tk.Base\" class=\"docClass\">Tk.Base</a><span class=\"signature\"><span class='chainable' >chainable</span><span class='private' >private</span></span></div><div class='description'><div class='short'>销毁通过 linked 关联的对象\n实例销毁时会自动调用该方法，除非你要在实例销毁前销毁关联资源，否则不需要手动调用该方法 ...</div><div class='long'><p>销毁通过 <code><a href=\"#!/api/Tk.Base-method-link\" rel=\"Tk.Base-method-link\" class=\"docClass\">linked</a></code> 关联的对象\n实例销毁时会自动调用该方法，除非你要在实例销毁前销毁关联资源，否则不需要手动调用该方法</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>names</span> : String[]<div class='sub-desc'><p>关联的资源名称数组</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Tk.Base\" rel=\"Tk.Base\" class=\"docClass\">Tk.Base</a></span><div class='sub-desc'><p>this</p>\n</div></li></ul></div></div></div></div><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Static methods</h3><div id='static-method-addInheritableStatics' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Base'>Tk.Base</span><br/><a href='source/Base.html#Tk-Base-static-method-addInheritableStatics' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Base-static-method-addInheritableStatics' class='name expandable'>addInheritableStatics</a>( <span class='pre'>members</span> )<span class=\"signature\"><span class='chainable' >chainable</span><span class='private' >private</span><span class='static' >static</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>members</span> : Object<div class='sub-desc'>\n</div></li></ul></div></div></div><div id='static-method-addMember' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Base'>Tk.Base</span><br/><a href='source/Base.html#Tk-Base-static-method-addMember' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Base-static-method-addMember' class='name expandable'>addMember</a>( <span class='pre'>name, member</span> )<span class=\"signature\"><span class='chainable' >chainable</span><span class='private' >private</span><span class='static' >static</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : Object<div class='sub-desc'>\n</div></li><li><span class='pre'>member</span> : Object<div class='sub-desc'>\n</div></li></ul></div></div></div><div id='static-method-addMembers' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Base'>Tk.Base</span><br/><a href='source/Base.html#Tk-Base-static-method-addMembers' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Base-static-method-addMembers' class='name expandable'>addMembers</a>( <span class='pre'>members, [isStatic], [privacy]</span> )<span class=\"signature\"><span class='chainable' >chainable</span><span class='static' >static</span></span></div><div class='description'><div class='short'>对类的原型添加方法或者属性\n\nTk.define('My.awesome.Cat', {\n    constructor: function() {\n        ... ...</div><div class='long'><p>对类的原型添加方法或者属性</p>\n\n<pre><code><a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('My.awesome.Cat', {\n    constructor: function() {\n        ...\n    }\n});\n\n My.awesome.Cat.addMembers({\n     meow: function() {\n        alert('Meowww...');\n     }\n });\n\n var kitty = new My.awesome.Cat();\n kitty.meow();\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>members</span> : Object<div class='sub-desc'><p>添加到这个类的成员对象</p>\n</div></li><li><span class='pre'>isStatic</span> : Boolean (optional)<div class='sub-desc'><p>当 <code>true</code> 表示成员是静态的</p>\n<p>Defaults to: <code>false</code></p></div></li><li><span class='pre'>privacy</span> : Boolean (optional)<div class='sub-desc'><p><code>true</code> 表示成员是私有的，调试模式下针对成员方法使用</p>\n<p>Defaults to: <code>false</code></p></div></li></ul></div></div></div><div id='static-method-addStatics' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Base'>Tk.Base</span><br/><a href='source/Base.html#Tk-Base-static-method-addStatics' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Base-static-method-addStatics' class='name expandable'>addStatics</a>( <span class='pre'>members</span> ) : <a href=\"#!/api/Tk.Base\" rel=\"Tk.Base\" class=\"docClass\">Tk.Base</a><span class=\"signature\"><span class='chainable' >chainable</span><span class='static' >static</span></span></div><div class='description'><div class='short'>添加 或者 重载 这个类的静态成员\n\nTk.define('My.cool.Class', {\n    ... ...</div><div class='long'><p>添加 或者 重载 这个类的静态成员</p>\n\n<pre><code><a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('My.cool.Class', {\n    ...\n});\n\nMy.cool.Class.addStatics({\n    someProperty: 'someValue',      // My.cool.Class.someProperty = 'someValue'\n    method1: function() { ... },    // My.cool.Class.method1 = function() { ... };\n    method2: function() { ... }     // My.cool.Class.method2 = function() { ... };\n});\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>members</span> : Object<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Tk.Base\" rel=\"Tk.Base\" class=\"docClass\">Tk.Base</a></span><div class='sub-desc'><p>this</p>\n</div></li></ul></div></div></div><div id='static-method-callParent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Base'>Tk.Base</span><br/><a href='source/Base.html#Tk-Base-static-method-callParent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Base-static-method-callParent' class='name expandable'>callParent</a>( <span class='pre'>args</span> )<span class=\"signature\"><span class='protected' >protected</span><span class='static' >static</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object<div class='sub-desc'></div></li></ul></div></div></div><div id='static-method-callSuper' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Base'>Tk.Base</span><br/><a href='source/Base.html#Tk-Base-static-method-callSuper' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Base-static-method-callSuper' class='name expandable'>callSuper</a>( <span class='pre'>args</span> )<span class=\"signature\"><span class='protected' >protected</span><span class='static' >static</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object<div class='sub-desc'></div></li></ul></div></div></div><div id='static-method-create' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Base'>Tk.Base</span><br/><a href='source/Base.html#Tk-Base-static-method-create' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Base-static-method-create' class='name expandable'>create</a>( <span class='pre'></span> ) : Object<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>创建一个当前类的实例\nCreate a new instance of this Class. ...</div><div class='long'><p>创建一个当前类的实例\nCreate a new instance of this Class.</p>\n\n<pre><code><a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('My.cool.Class', {\n    ...\n});\n</code></pre>\n\n<p>所有参数会被传递到类的构造函数</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>新创建的实例</p>\n</div></li></ul></div></div></div><div id='static-method-extend' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Base'>Tk.Base</span><br/><a href='source/Base.html#Tk-Base-static-method-extend' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Base-static-method-extend' class='name expandable'>extend</a>( <span class='pre'>config</span> )<span class=\"signature\"><span class='private' >private</span><span class='static' >static</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>config</span> : Object<div class='sub-desc'>\n</div></li></ul></div></div></div><div id='static-method-getName' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Base'>Tk.Base</span><br/><a href='source/Base.html#Tk-Base-static-method-getName' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Base-static-method-getName' class='name expandable'>getName</a>( <span class='pre'></span> ) : String<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>获取当前类的字符串类名\n\nTk.define('My.cool.Class', {\n    constructor: function() {\n        alert(this.self.getName()); // alerts...</div><div class='long'><p>获取当前类的字符串类名</p>\n\n<pre><code><a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('My.cool.Class', {\n    constructor: function() {\n        alert(this.self.getName()); // alerts 'My.cool.Class'\n    }\n});\n\nMy.cool.Class.getName(); // 'My.cool.Class'\n</code></pre>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>className</p>\n</div></li></ul></div></div></div><div id='static-method-mixin' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Base'>Tk.Base</span><br/><a href='source/Base.html#Tk-Base-static-method-mixin' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Base-static-method-mixin' class='name expandable'>mixin</a>( <span class='pre'>name, mixinClass</span> )<span class=\"signature\"><span class='private' >private</span><span class='static' >static</span></span></div><div class='description'><div class='short'>Used internally by the mixins pre-processor ...</div><div class='long'><p>Used internally by the mixins pre-processor</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : Object<div class='sub-desc'></div></li><li><span class='pre'>mixinClass</span> : Object<div class='sub-desc'></div></li></ul></div></div></div><div id='static-method-onExtended' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Base'>Tk.Base</span><br/><a href='source/Base.html#Tk-Base-static-method-onExtended' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Base-static-method-onExtended' class='name expandable'>onExtended</a>( <span class='pre'>fn, scope</span> )<span class=\"signature\"><span class='chainable' >chainable</span><span class='private' >private</span><span class='static' >static</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fn</span> : Object<div class='sub-desc'></div></li><li><span class='pre'>scope</span> : Object<div class='sub-desc'></div></li></ul></div></div></div><div id='static-method-override' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Base'>Tk.Base</span><br/><a href='source/Base.html#Tk-Base-static-method-override' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Base-static-method-override' class='name expandable'>override</a>( <span class='pre'>members</span> ) : <a href=\"#!/api/Tk.Base\" rel=\"Tk.Base\" class=\"docClass\">Tk.Base</a><span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>Override members of this class. ...</div><div class='long'><p>Override members of this class. Overridden methods can be invoked via\n<a href=\"#!/api/Tk.Base-method-callParent\" rel=\"Tk.Base-method-callParent\" class=\"docClass\">callParent</a>.</p>\n\n<pre><code><a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('My.Cat', {\n    constructor: function() {\n        alert(\"I'm a cat!\");\n    }\n});\n\nMy.Cat.override({\n    constructor: function() {\n        alert(\"I'm going to be a cat!\");\n\n        this.callParent(arguments);\n\n        alert(\"Meeeeoooowwww\");\n    }\n});\n\nvar kitty = new My.Cat(); // alerts \"I'm going to be a cat!\"\n                          // alerts \"I'm a cat!\"\n                          // alerts \"Meeeeoooowwww\"\n</code></pre>\n\n<p>Direct use of this method should be rare. Use <a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>\ninstead:</p>\n\n<pre><code><a href=\"#!/api/Tk-method-define\" rel=\"Tk-method-define\" class=\"docClass\">Tk.define</a>('My.CatOverride', {\n    override: 'My.Cat',\n    constructor: function() {\n        alert(\"I'm going to be a cat!\");\n\n        this.callParent(arguments);\n\n        alert(\"Meeeeoooowwww\");\n    }\n});\n</code></pre>\n\n<p>The above accomplishes the same result but can be managed by the <a href=\"#!/api/Tk.Loader\" rel=\"Tk.Loader\" class=\"docClass\">Tk.Loader</a>\nwhich can properly order the override and its target class and the build process\ncan determine whether the override is needed based on the required state of the\ntarget class (My.Cat).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>members</span> : Object<div class='sub-desc'><p>The properties to add to this class. This should be\nspecified as an object literal containing one or more properties.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Tk.Base\" rel=\"Tk.Base\" class=\"docClass\">Tk.Base</a></span><div class='sub-desc'><p>this class</p>\n</div></li></ul></div></div></div><div id='static-method-triggerExtended' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Tk.Base'>Tk.Base</span><br/><a href='source/Base.html#Tk-Base-static-method-triggerExtended' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Tk.Base-static-method-triggerExtended' class='name expandable'>triggerExtended</a>( <span class='pre'></span> )<span class=\"signature\"><span class='private' >private</span><span class='static' >static</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div></div></div></div></div>","meta":{}});